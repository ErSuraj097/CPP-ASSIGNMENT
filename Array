// Q1 - Given two vectors arr1[] and arr2[] of size m and n sorted in increasing order. Merge the
// two arrays into a single sorted array of size m+n.

// (Easy)

// Assignment Solutions

// Input:
// Output:
// Input:
// Output:
// arr1=[1,2,3] arr2=[4,5,6]
// arr=[1,2,3,4,5,6]
// arr1=[1,3,5] arr2=[2,4,6]
// arr=[1,2,3,4,5,6]
#include <iostream>
using namespace std;
int main()
{

int m,n 
int arr1=[];
int arr2=[];
int i= m-1; //first pointer
int j= n-1; //second pointer
int k= m+n-1;
int arr[m+n];
while(i>=0 && j>=0)
{
if(arr1[i]<arr2[j]) //comparing the two elements at which our
pointers are
{
arr[k--]=arr1[j--];
}else{
arr[k--]=arr2[i--];
}
}
while(j>=0)
{
arr[k--]=arr2[j--];
}
while(i>=0)
{
arr[k- -]=arr1[iâ€“];
}
return arr;

}

// Take 2 pointers i and j with i pointing at the beginning of the array and j pointing at the index next to i.
#include<iostream>
using namespace std;
int main(){
int size,n;
int arr[10]={};
int i=0;
int j=1;
while(i<size && j<size)
{
if((arr[j]-arr[i])==(n))
{
cout<<"Yes";
}else if((arr[j]-arr[i] )< (n))
{
j++;
}else{
i++;
}
}
cout<<"No";
}

// Q4 - Given a vector arr[] sorted in increasing order. Return an array of squares of each
// number sorted in increasing order. Where size of vector 1<size<101.

#include<iostream>
using namespace std;
int main() {
int i=0;
int nums;

int j=arr.size()-1;
vector<int> ans(nums.size(),0);
int ind=nums.size()-1;
while(i<=j && ind>=0)
{
if(abs(nums[i])>abs(nums[j])) 

{
ans[ind]=arr[i]*arr[i];
ind--;
i++;
}else{
ans[ind]=arr[j]*arr[j];
ind--;
j--;
}
}
return ans;
}
